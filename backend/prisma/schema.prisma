// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  username  String   @unique
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  posts     Post[]
}

model Post {
  id        Int      @id @default(autoincrement())
  title     String
  content   String?
  published Boolean  @default(false)
  authorId  Int
  author    User     @relation(fields: [authorId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Ordering System Models
model BusinessInfo {
  id        Int      @id @default(autoincrement())
  name      String
  address   String?
  phone     String?
  hours     String?
  logoUrl   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model MenuCategory {
  id        Int        @id @default(autoincrement())
  name      String
  sortOrder Int        @default(0)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  items     MenuItem[]
}

model MenuItem {
  id             Int          @id @default(autoincrement())
  menuCategoryId Int
  name           String
  description    String?
  price          Float
  imageUrl       String?
  visible        Boolean      @default(true)
  sortOrder      Int          @default(0)
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  category       MenuCategory @relation(fields: [menuCategoryId], references: [id], onDelete: Cascade)
  orderItems     OrderItem[]
}

model Order {
  id              Int         @id @default(autoincrement())
  customerName    String
  customerPhone   String?
  customerEmail   String?
  deliveryAddress String?
  orderType       String      @default("to-go") // 'delivery' or 'to-go'
  status          String      @default("pending") // 'pending', 'accepted', 'rejected', 'ready', 'completed', 'cancelled'
  totalAmount     Float
  paymentMethod   String?     @default("cash") // 'cash' or 'card'
  notes           String?
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  items           OrderItem[]
}

model OrderItem {
  id                 Int      @id @default(autoincrement())
  orderId            Int
  menuItemId         Int
  quantity           Int
  priceAtOrder       Float
  itemNameAtOrder    String
  notes              String?
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  order              Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  menuItem           MenuItem @relation(fields: [menuItemId], references: [id])
}